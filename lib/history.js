// Generated by CoffeeScript 1.6.1
(function() {
  var History, fs,
    _this = this;

  fs = require("fs");

  module.exports = History = (function() {

    function History() {
      var _this = this;
      this.save = function(filename, callback) {
        return History.prototype.save.apply(_this, arguments);
      };
      this.load = function(filename, callback) {
        return History.prototype.load.apply(_this, arguments);
      };
    }

    /*
    Whether or not to only store uniquely tagged runs
    */


    History.prototype.uniquesOnly = true;

    /*
    Holds the loaded runs
    */


    History.prototype.runs = [];

    /*
    Add the results of a set of suites
    */


    History.prototype.addRun = function(tag, timestamp, suites) {
      var benchmark, obj, suite, _i, _j, _len, _len1;
      obj = {
        tag: tag,
        timestamp: timestamp,
        suites: {}
      };
      for (_i = 0, _len = suites.length; _i < _len; _i++) {
        suite = suites[_i];
        obj.suites[suite.name] = {};
        for (_j = 0, _len1 = suite.length; _j < _len1; _j++) {
          benchmark = suite[_j];
          if (!benchmark.times.cycle) {
            continue;
          }
          obj.suites[suite.name][benchmark.name] = {
            hz: benchmark.hz,
            cycles: benchmark.cycles,
            count: benchmark.count,
            times: benchmark.times
          };
        }
      }
      this.runs.unshift(obj);
      return obj;
    };

    History.prototype.load = function(filename, callback) {
      var _this = this;
      return fs.readFile(filename, "utf8", function(err, contents) {
        if (err) {
          return callback(err);
        }
        try {
          _this.runs = JSON.parse(contents);
        } catch (e) {
          _this.runs = [];
        }
        if (!Array.isArray(_this.runs)) {
          _this.runs = [];
        }
        return callback(null, _this);
      });
    };

    History.prototype.save = function(filename, callback) {
      var runs, seen,
        _this = this;
      runs = this.runs;
      if (this.uniquesOnly) {
        seen = [];
        runs = runs.filter(function(run) {
          if (run.tag == null) {
            return true;
          }
          if (~seen.indexOf(run.tag)) {
            return false;
          }
          seen.push(run.tag);
          return true;
        });
      }
      return fs.writeFile(filename, JSON.stringify(runs, null, 2), function(err) {
        if (err) {
          return callback(err);
        }
        return callback(null, _this);
      });
    };

    /*
    Find the previous runs for the given benchmark
    */


    History.prototype.findPreviousRuns = function(suite, benchmark, limit) {
      var results, run, _i, _len, _ref, _ref1;
      results = [];
      _ref = this.runs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        run = _ref[_i];
        if (((_ref1 = run.suites[suite.name]) != null ? _ref1[benchmark.name] : void 0) == null) {
          continue;
        }
        results.push(run.suites[suite.name][benchmark.name]);
        if (limit && results.length >= limit) {
          break;
        }
      }
      return results;
    };

    /*
    Return true if the given benchmark is a performance regression, within
    the given error margin
    */


    History.prototype.isRegression = function(suite, benchmark, errorMarginInPercent) {
      var difference, percentageDifference, previous;
      if (errorMarginInPercent == null) {
        errorMarginInPercent = 0.00005;
      }
      previous = this.findPreviousRuns(suite, benchmark, 1).shift();
      if (previous == null) {
        return false;
      }
      difference = benchmark.hz - previous.hz;
      percentageDifference = ((difference / benchmark.hz) * 100).toFixed(3);
      return percentageDifference <= (0 - errorMarginInPercent);
    };

    /*
    Return true if the given benchmark is a performance improvement, within
    the given error margin
    */


    History.prototype.isImprovement = function(suite, benchmark, errorMarginInPercent) {
      var difference, percentageDifference, previous;
      if (errorMarginInPercent == null) {
        errorMarginInPercent = 0.000005;
      }
      previous = this.findPreviousRuns(suite, benchmark, 1).shift();
      if (previous == null) {
        return false;
      }
      difference = benchmark.hz - previous.hz;
      percentageDifference = ((difference / benchmark.hz) * 100).toFixed(3);
      return percentageDifference >= errorMarginInPercent;
    };

    return History;

  })();

}).call(this);
