// Generated by CoffeeScript 1.6.1
(function() {
  var BaseReporter, Benchmark, SpecReporter,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseReporter = require("./base");

  Benchmark = require("benchmark");

  module.exports = SpecReporter = (function(_super) {

    __extends(SpecReporter, _super);

    function SpecReporter() {
      var _this = this;
      this.onComplete = function(suites) {
        return SpecReporter.prototype.onComplete.apply(_this, arguments);
      };
      this.onCompleteBenchmark = function(suite, benchmark) {
        return SpecReporter.prototype.onCompleteBenchmark.apply(_this, arguments);
      };
      this.onStartBenchmark = function(suite, benchmark) {
        return SpecReporter.prototype.onStartBenchmark.apply(_this, arguments);
      };
      this.onCompleteSuite = function(suite) {
        return SpecReporter.prototype.onCompleteSuite.apply(_this, arguments);
      };
      this.onStartSuite = function(suite) {
        return SpecReporter.prototype.onStartSuite.apply(_this, arguments);
      };
      this.onStart = function(runner) {
        return SpecReporter.prototype.onStart.apply(_this, arguments);
      };
      SpecReporter.__super__.constructor.apply(this, arguments);
      this.benchmarkCount = 0;
    }

    /*
    Invoked when the runner stars
    */


    SpecReporter.prototype.onStart = function(runner) {
      console.log(this.color('light', "Benchmarking, please wait..."));
      return SpecReporter.__super__.onStart.apply(this, arguments);
    };

    /*
    Invoked when a suite is started
    */


    SpecReporter.prototype.onStartSuite = function(suite) {
      console.log(" ");
      if (suite.isComparison) {
        console.log("    " + (this.color('light', 'Compare:')) + " " + (this.color('suite', suite.name)));
      } else {
        console.log("    " + (this.color('light', 'Suite:')) + " " + (this.color('suite', suite.name)));
      }
      console.log(" ");
      return SpecReporter.__super__.onStartSuite.apply(this, arguments);
    };

    /*
    Invoked when a suite ends
    */


    SpecReporter.prototype.onCompleteSuite = function(suite) {
      console.log(" ");
      if (suite.isComparison) {
        console.log("        " + (this.summarizeComparison(suite)));
      } else {
        console.log("        " + (this.summarizeSuite(suite)));
      }
      console.log(" ");
      return SpecReporter.__super__.onCompleteSuite.apply(this, arguments);
    };

    /*
    Invoked when a benchmark starts
    */


    SpecReporter.prototype.onStartBenchmark = function(suite, benchmark) {
      console.log("        " + benchmark.name);
      return SpecReporter.__super__.onStartBenchmark.apply(this, arguments);
    };

    /*
    Invoked when a benchmark completes
    */


    SpecReporter.prototype.onCompleteBenchmark = function(suite, benchmark) {
      this.benchmarkCount += 1;
      console.log("            " + (this.summarizeBenchmark(suite, benchmark)));
      return SpecReporter.__super__.onCompleteBenchmark.apply(this, arguments);
    };

    /*
    Invoked when all the suites have finished
    */


    SpecReporter.prototype.onComplete = function(suites) {
      SpecReporter.__super__.onComplete.apply(this, arguments);
      console.log(" ");
      console.log("    " + (this.finalSummary(suites)));
      return console.log(" ");
    };

    /*
    Nicely format a number
    */


    SpecReporter.prototype.formatNumber = function(num) {
      if (num > 1000) {
        return Benchmark.formatNumber(Math.round(num));
      } else {
        return Benchmark.formatNumber(num);
      }
    };

    /*
    Summarize the results of a benchmark
    */


    SpecReporter.prototype.summarizeBenchmark = function(suite, benchmark) {
      var check, duration, speed, summary;
      check = this.color('checkmark', this.symbols.ok);
      duration = "" + (this.color('light', 'Completed in')) + " " + benchmark.times.elapsed + "s";
      speed = "" + (this.color('light', '(')) + (this.formatNumber(benchmark.hz.toFixed(3))) + " ops/sec" + (this.color('light', ')'));
      summary = "" + check + " " + duration + " " + speed;
      if (this.runner.history.isRegression(suite, benchmark)) {
        return "" + summary + "\n            " + (this.summarizeRegression(suite, benchmark));
      } else if (this.runner.history.isImprovement(suite, benchmark)) {
        return "" + summary + "\n            " + (this.summarizeImprovement(suite, benchmark));
      } else {
        return summary;
      }
    };

    SpecReporter.prototype.summarizeRegression = function(suite, benchmark) {
      var cross, diff, difference, lastRun, percentageDifference, regression, slower;
      lastRun = this.runner.history.findPreviousRuns(suite, benchmark, 1).shift();
      difference = lastRun.hz - benchmark.hz;
      percentageDifference = ((difference / lastRun.hz) * 100).toFixed(3);
      cross = this.color('bright fail', this.symbols.err);
      diff = this.color('fail', "" + percentageDifference + "%");
      regression = this.color('fail', "Regression,");
      slower = this.color('fail', "slower.");
      return "" + cross + " " + regression + " " + diff + " " + slower;
    };

    SpecReporter.prototype.summarizeImprovement = function(suite, benchmark) {
      var cross, diff, difference, faster, improvement, lastRun, percentageDifference;
      lastRun = this.runner.history.findPreviousRuns(suite, benchmark, 1).shift();
      difference = benchmark.hz - lastRun.hz;
      percentageDifference = ((difference / benchmark.hz) * 100).toFixed(3);
      cross = this.color('bright pass', this.symbols.ok);
      diff = this.color('bright pass', "" + percentageDifference + "%");
      improvement = this.color('green', "Improvement,");
      faster = this.color('green', 'faster.');
      return "" + cross + " " + improvement + " " + diff + " " + faster;
    };

    /*
    Return the total time in seconds for the suite
    */


    SpecReporter.prototype.suiteTotalTime = function(suite) {
      return suite.reduce(function(prev, benchmark) {
        return prev += benchmark.times.elapsed;
      }, 0).toFixed(3);
    };

    /*
    Summarize the results of a suite
    */


    SpecReporter.prototype.summarizeSuite = function(suite) {
      return "" + (this.color('checkmark', this.symbols.ok)) + " Completed in " + (this.suiteTotalTime(suite)) + "s";
    };

    /*
    Summarize the results of a comparison suite.
    */


    SpecReporter.prototype.summarizeComparison = function(suite) {
      var check, difference, duration, fastest, fastestFirst, nextFastest, percentageDifference, speed;
      if (!(suite.length > 1)) {
        return this.summarizeSuite(suite);
      }
      fastestFirst = suite.sort(function(a, b) {
        return b.hz - a.hz;
      });
      fastest = fastestFirst[0];
      nextFastest = fastestFirst[1];
      difference = fastest.hz - nextFastest.hz;
      percentageDifference = ((difference / fastest.hz) * 100).toFixed(3);
      check = this.color('checkmark', this.symbols.ok);
      duration = "" + (this.color('light', 'Completed in')) + " " + (this.suiteTotalTime(suite)) + "s";
      speed = "" + (this.color('bright pass', fastest.name)) + " " + (this.color('light', "was fastest by")) + " " + (this.color('bright pass', "" + (this.formatNumber(percentageDifference)) + "%"));
      return "" + check + " " + duration + ", " + speed;
    };

    /*
    The final summary after all benchmarks have run
    */


    SpecReporter.prototype.finalSummary = function(suites) {
      var check, seconds, time, total;
      seconds = (this.totalTime() / 1000).toFixed(3);
      check = this.color('bright pass', "âœ”");
      total = this.color('green', "" + this.benchmarkCount + " benchmarks complete");
      time = this.color('light', "(" + seconds + "s)");
      return "" + check + " " + total + " " + time;
    };

    return SpecReporter;

  })(BaseReporter);

}).call(this);
